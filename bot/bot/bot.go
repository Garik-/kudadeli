package bot

import (
	"context"
	"fmt"
	"html"
	"kudadeli/model"
	"log/slog"
	"strings"
	"time"

	"github.com/google/uuid"
	"gopkg.in/telebot.v3"
	"gopkg.in/telebot.v3/middleware"

	"kudadeli/parser"
)

type Database interface {
	Insert(ctx context.Context, expense model.Expense) error
	List(ctx context.Context, limit int) ([]model.Expense, error)
	Delete(ctx context.Context, id model.ExpenseID) error
}

type Service struct {
	bot *telebot.Bot
}

const (
	pollerTimeout    = 10 * time.Second
	defaultListLimit = 10

	helpMessage = `üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ó–∞–ø–∏—Å—å —Ç—Ä–∞—Ç:
   üëâ –Ω–∞–ª 1500 –∫—Ä–∞—Å–∫–∞ –≤–∞–Ω–Ω–∞—è
   üëâ –∫–∞—Ä—Ç–∞ 3200 –¥–≤–µ—Ä–∏
   üëâ –Ω–∞–ª 5000 —É—Å–ª—É–≥–∏ –¥–µ–º–æ–Ω—Ç–∞–∂

2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
   - "–Ω–∞–ª" –∏–ª–∏ "–Ω–∞–ª–∏—á–Ω—ã–µ" ‚Äî –Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
   - "–∫–∞—Ä—Ç–∞" ‚Äî –æ–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ
   - "—É—Å–ª—É–≥–∏", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–º–µ–±–µ–ª—å" ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   - –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ

3. –ö–æ–º–∞–Ω–¥—ã:
   /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
   /list [N] ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ [N] —Ç—Ä–∞—Ç`
)

var errorMessages = map[error]string{ //nolint:gochecknoglobals
	parser.ErrEmptyMessage:        "‚ùå –¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –°–º–æ—Ç—Ä–∏, –≤–æ—Ç –ø—Ä–∏–º–µ—Ä: `–Ω–∞–ª 1500 –∫—Ä–∞—Å–∫–∞ –≤–∞–Ω–Ω–∞—è`",
	parser.ErrNotEnoughData:       "‚ùå –¢—É—Ç –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –≤–æ—Ç —Ñ–æ—Ä–º–∞—Ç, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è: `[—Ç–∏–ø_–æ–ø–ª–∞—Ç—ã] [—Å—É–º–º–∞] [–∫–∞—Ç–µ–≥–æ—Ä–∏—è] [–æ–ø–∏—Å–∞–Ω–∏–µ]`", //nolint:lll
	parser.ErrPaymentTypeNotFound: "‚ùå –ù–∞–ø–∏—à–∏, –∫–∞–∫ –∑–∞–ø–ª–∞—Ç–∏–ª: `–Ω–∞–ª` –∏–ª–∏ `–∫–∞—Ä—Ç–∞`",
	parser.ErrAmountNotFound:      "‚ùå –°—É–º–º–∞ —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ù–∞–ø–∏—à–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: `1500`",
}

func getFriendlyError(err error) string {
	if msg, ok := errorMessages[err]; ok {
		return msg
	}

	return "‚ùå –£ –º–µ–Ω—è —Ç—É—Ç –æ—à–∏–±–∫–∞ –∫–∞–∫–∞—è-—Ç–æ –≤—ã—Å–∫–æ—á–∏–ª–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫, –º–æ–∂–µ—Ç, –ø—Ä–æ–∫–∞—Ç–∏—Ç."
}

func formatExpenseHTML(e model.Expense) string {
	return fmt.Sprintf(
		""+
			"<b>–î–∞—Ç–∞</b>: %s\n"+
			"<b>–¢–∏–ø</b>: %s\n"+
			"<b>–°—É–º–º–∞</b>: %s ‚ÇΩ\n"+
			"<b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: %s\n"+
			"<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è</b>: %s\n"+
			"<b>ID</b>: %s\n",

		html.EscapeString(e.CreatedAt.Format("02.01.2006 15:04")),
		html.EscapeString(e.PaymentType.String()),
		html.EscapeString(e.Amount.StringFixed(2)),
		html.EscapeString(e.Description),
		html.EscapeString(e.Category.String()),
		html.EscapeString(e.ID.String()),
	)
}

func formatExpensesHTML(e []model.Expense) string {
	var sb strings.Builder

	for i := range e {
		sb.WriteString(formatExpenseHTML(e[i]))
		sb.WriteString("\n\n")
	}

	return sb.String()
}

func New(ctx context.Context, token string, database Database, allowUsers []int64) (*Service, error) { //nolint:funlen
	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: pollerTimeout},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	helpHandler := func(c telebot.Context) error {
		return c.Send(helpMessage)
	}

	listHandler := func(c telebot.Context) error {
		limit := defaultListLimit

		tags := c.Args()

		if len(tags) > 0 {
			limit = parser.Integer(tags[0], defaultListLimit)
		}

		expenses, err := database.List(ctx, limit)
		if err != nil {
			return c.Send("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç, –º–æ–∂–µ—Ç, –µ—â–µ —Ä–∞–∑–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º?")
		}

		if len(expenses) == 0 {
			return c.Send("‚ùå –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç –ø—É—Å—Ç.")
		}

		return c.Send("<b>üìä –°–ø–∏—Å–æ–∫ —Ç—Ä–∞—Ç:</b>\n\n"+formatExpensesHTML(expenses), &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	deleteHandler := func(c telebot.Context) error {
		tags := c.Args()
		if len(tags) == 0 {
			return c.Send("‚ùå –£–∫–∞–∂–∏ ID, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
		}

		id := parser.ID(tags[0])
		if id == uuid.Nil {
			return c.Send("‚ùå –£–∫–∞–∂–∏ ID, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å.")
		}

		err := database.Delete(ctx, id)
		if err != nil {
			return c.Send("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å, –º–æ–∂–µ—Ç, –µ—â–µ —Ä–∞–∑–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º?")
		}

		return c.Send("‚úÖ –£–¥–∞–ª–µ–Ω–æ.", &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	}

	group := bot.Group()

	if len(allowUsers) > 0 {
		group.Use(middleware.Whitelist(allowUsers...))
	}

	bot.Handle("/help", helpHandler)
	bot.Handle("/start", helpHandler)

	group.Handle("/list", listHandler)
	group.Handle("/delete", deleteHandler)
	group.Handle(telebot.OnText, func(c telebot.Context) error {
		sender := c.Sender()

		expense, err := parser.Message(c.Text())
		if err != nil {
			return c.Send(getFriendlyError(err))
		}

		expense.UserID = sender.ID

		err = database.Insert(ctx, expense)
		if err != nil {
			return c.Send("‚ùå –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å, –º–æ–∂–µ—Ç, –µ—â–µ —Ä–∞–∑–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º?")
		}

		return c.Send("<b>‚úÖ –ó–∞–ø–∏—Å–∞–ª:</b>\n\n"+formatExpenseHTML(expense), &telebot.SendOptions{
			ParseMode: telebot.ModeHTML,
		})
	})

	return &Service{
		bot: bot,
	}, nil
}

func (s *Service) Start(ctx context.Context) {
	if s.bot != nil {
		s.bot.Start()
	} else {
		slog.WarnContext(ctx, "bot is nil")
	}
}

func (s *Service) Stop(ctx context.Context) {
	if s.bot != nil {
		s.bot.Stop()
	} else {
		slog.WarnContext(ctx, "bot is nil")
	}
}
