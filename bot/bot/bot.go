package bot

import (
	"context"
	"fmt"
	"log/slog"
	"time"

	"gopkg.in/telebot.v3"
)

type Service struct {
	bot *telebot.Bot
}

const (
	pollerTimeout = 10 * time.Second

	helpMessage = `üìå –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ó–∞–ø–∏—Å—å —Ç—Ä–∞—Ç:
   üëâ –Ω–∞–ª 1500 –∫—Ä–∞—Å–∫–∞ –≤–∞–Ω–Ω–∞—è
   üëâ –∫–∞—Ä—Ç–∞ 3200 –¥–≤–µ—Ä–∏
   üëâ –Ω–∞–ª 5000 —É—Å–ª—É–≥–∏ –¥–µ–º–æ–Ω—Ç–∞–∂

2. –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:
   - "–Ω–∞–ª" –∏–ª–∏ "–Ω–∞–ª–∏—á–Ω—ã–µ" ‚Äî –Ω–∞–ª–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞
   - "–∫–∞—Ä—Ç–∞" ‚Äî –æ–ø–ª–∞—Ç–∞ –ø–æ –∫–∞—Ä—Ç–µ
   - "—É—Å–ª—É–≥–∏", "–º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–º–µ–±–µ–ª—å" ‚Äî –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   - –û—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –æ–ø–∏—Å–∞–Ω–∏–µ

3. –ö–æ–º–∞–Ω–¥—ã:
   /help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É`
)

func New(ctx context.Context, token string) (*Service, error) {
	slog.InfoContext(ctx, "init telebot", "token", token)

	pref := telebot.Settings{
		Token:  token,
		Poller: &telebot.LongPoller{Timeout: pollerTimeout},
	}

	bot, err := telebot.NewBot(pref)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	bot.Handle("/help", func(c telebot.Context) error {
		return c.Send(helpMessage)
	})

	bot.Handle("/start", func(c telebot.Context) error {
		return c.Send(helpMessage)
	})

	// –ü—Ä–∏–º–µ—Ä echo-—Ö–µ–Ω–¥–ª–µ—Ä–∞, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å:
	bot.Handle(telebot.OnText, func(c telebot.Context) error {
		return c.Send("–Ø –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é: " + c.Text())
	})

	return &Service{
		bot: bot,
	}, nil
}

func (s *Service) Start(ctx context.Context) {
	if s.bot != nil {
		s.bot.Start()
	} else {
		slog.WarnContext(ctx, "bot is nil")
	}
}

func (s *Service) Stop(ctx context.Context) {
	if s.bot != nil {
		s.bot.Stop()
	} else {
		slog.WarnContext(ctx, "bot is nil")
	}
}
